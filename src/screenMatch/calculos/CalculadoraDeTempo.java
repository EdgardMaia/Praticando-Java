package screenMatch.calculos;

import screenMatch.modelos.Titulo;
// import screenMatch.modelos.Serie;
// import screenMatch.modelos.Filme;

/**
 * ‚è∞ CLASSE CALCULADORADETEMPO - DEMONSTRA√á√ÉO DE POLIMORFISMO
 * 
 * Esta classe √© um exemplo perfeito de como o polimorfismo simplifica o c√≥digo:
 * 
 * üé≠ POLIMORFISMO:
 * - Aceita qualquer objeto do tipo Titulo (Filme ou Serie)
 * - Um m√©todo funciona com m√∫ltiplos tipos
 * - Reduz duplica√ß√£o de c√≥digo significativamente
 * 
 * üîß EVOLU√á√ÉO DO DESIGN:
 * - Antes: m√©todos separados para cada tipo (comentados abaixo)
 * - Depois: um m√©todo polim√≥rfico que funciona com todos
 * 
 * üèóÔ∏è SINGLE RESPONSIBILITY:
 * - Responsabilidade √∫nica: calcular tempo total
 * - N√£o precisa saber detalhes internos de Filme ou Serie
 * - Depende apenas da interface comum (Titulo)
 */
public class CalculadoraDeTempo {
    
    // ========================================
    // üîí ATRIBUTO PRIVADO (ENCAPSULAMENTO)
    // ========================================
    
    /**
     * ‚è±Ô∏è ACUMULADOR DE TEMPO TOTAL
     * üîí ENCAPSULAMENTO: Privado para proteger integridade do c√°lculo
     * üìä ESTADO: Mant√©m a soma de todas as dura√ß√µes adicionadas
     */
    private int tempoTotal;

    // ========================================
    // üîì M√âTODO P√öBLICO - GETTER
    // ========================================
    
    /**
     * üîç GETTER: Retorna o tempo total calculado
     * üîí ENCAPSULAMENTO: Acesso controlado ao resultado
     * üìä SOMENTE LEITURA: N√£o permite modifica√ß√£o direta do valor
     */
    public int getTempoTotal() {
        return this.tempoTotal;
    }

    // ========================================
    // ‚ùå DESIGN ANTIGO - SEM POLIMORFISMO
    // ========================================
    
    /*
     * üö´ C√ìDIGO COMENTADO: Demonstra o problema SEM polimorfismo
     * 
     * ‚ùå PROBLEMAS DESTA ABORDAGEM:
     * - Duplica√ß√£o de c√≥digo (l√≥gica igual, tipos diferentes)
     * - Necessidade de um m√©todo para cada tipo
     * - Dif√≠cil manuten√ß√£o (mudan√ßa na l√≥gica = alterar v√°rios m√©todos)
     * - N√£o extens√≠vel (novo tipo = novo m√©todo)
     * 
     * üîÑ CADA M√âTODO FAZ A MESMA COISA:
     * 1. Recebe um objeto
     * 2. Pega sua dura√ß√£o
     * 3. Soma ao total
     */
    
//    public void inclui(Filme f) {
//        this.tempoTotal += f.getDuracaoEmMinutos();
//    }
//
//    public void inclui(Serie s) {
//        this.tempoTotal += s.getDuracaoEmMinutos();
//    }

    // ========================================
    // ‚úÖ DESIGN MODERNO - COM POLIMORFISMO
    // ========================================

    /**
     * üé≠ M√âTODO POLIM√ìRFICO: A MAGIA DA POO!
     * 
     * üåü VANTAGENS DO POLIMORFISMO:
     * - UM m√©todo funciona com M√öLTIPLOS tipos
     * - Filme e Serie s√£o tratados como Titulo
     * - C√≥digo mais limpo e maint√≠vel
     * - Automaticamente funciona com novos tipos de Titulo
     * 
     * üé≠ POLIMORFISMO EM A√á√ÉO:
     * - Recebe qualquer Titulo (Filme ou Serie)
     * - Chama getDuracaoEmMinutos() no objeto
     * - Filme: retorna dura√ß√£o fixa
     * - Serie: calcula dinamicamente (temporadas √ó epis√≥dios √ó minutos)
     * - Resultado: comportamento correto para cada tipo!
     * 
     * üîÑ ABSTRA√á√ÉO:
     * - CalculadoraDeTempo n√£o precisa saber:
     *   * Se √© Filme ou Serie
     *   * Como a dura√ß√£o √© calculada
     *   * Detalhes internos dos objetos
     * - S√≥ precisa saber que Titulo tem getDuracaoEmMinutos()
     * 
     * üìà EXTENSIBILIDADE:
     * - Criar nova subclasse de Titulo (ex: Documentario)
     * - Funciona automaticamente com este m√©todo!
     * - Sem necessidade de modificar CalculadoraDeTempo
     * 
     * @param titulo Qualquer objeto que seja subclasse de Titulo (Filme, Serie, etc.)
     */
    public void inclui(Titulo titulo) {
        // üìù DEBUG: Mostra qual t√≠tulo est√° sendo adicionado
        System.out.println("Adicionando dura√ß√£o em minutos de " + titulo);
        
        // üé≠ POLIMORFISMO: getDuracaoEmMinutos() se comporta diferente para cada tipo
        // - Se titulo √© Filme: retorna valor definido no atributo
        // - Se titulo √© Serie: calcula temporadas * epis√≥dios * minutos
        this.tempoTotal += titulo.getDuracaoEmMinutos();
    }
}

/*
 * üìã RESUMO DOS CONCEITOS DEMONSTRADOS:
 * 
 * üé≠ POLIMORFISMO:
 *    Um m√©todo (inclui) funciona com m√∫ltiplos tipos (Filme, Serie)
 *    Mesmo comportamento externo, implementa√ß√µes internas diferentes
 * 
 * üîí ENCAPSULAMENTO:
 *    tempoTotal √© privado, acesso apenas via getter
 *    Protege a integridade do c√°lculo
 * 
 * üîÑ ABSTRA√á√ÉO:
 *    Esconde complexidade de como cada tipo calcula dura√ß√£o
 *    Interface simples: inclui(titulo) e getTempoTotal()
 * 
 * üèóÔ∏è SINGLE RESPONSIBILITY:
 *    Uma responsabilidade: somar dura√ß√µes
 *    N√£o se preocupa com tipos espec√≠ficos
 * 
 * üìà OPEN/CLOSED PRINCIPLE:
 *    Aberto para extens√£o: novos tipos de Titulo funcionam automaticamente
 *    Fechado para modifica√ß√£o: n√£o precisa alterar este c√≥digo
 * 
 * üéØ EXEMPLO DE USO:
 *    calc.inclui(filme);     // ‚úÖ Filme extends Titulo
 *    calc.inclui(serie);     // ‚úÖ Serie extends Titulo
 *    calc.inclui(documentario); // ‚úÖ Futuro Documentario extends Titulo
 */
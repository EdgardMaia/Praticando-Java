package screenMatch;

// üì¶ IMPORTA√á√ïES: Demonstram o uso de diferentes pacotes organizados
import java.util.ArrayList;
import screenMatch.calculos.CalculadoraDeTempo;
import screenMatch.calculos.FiltroRecomendacao;
import screenMatch.modelos.Episodio;
import screenMatch.modelos.Filme;
import screenMatch.modelos.Serie;

/**
 * üé¨ CLASSE PRINCIPAL - DEMONSTRA√á√ÉO DOS CONCEITOS DE POO
 * 
 * Esta classe demonstra todos os pilares da Programa√ß√£o Orientada a Objetos:
 * - üèóÔ∏è INSTANCIA√á√ÉO: Cria√ß√£o de objetos das classes
 * - üîí ENCAPSULAMENTO: Uso de getters/setters para acessar dados privados
 * - üß¨ HERAN√áA: Filme e Serie herdam de Titulo
 * - üé≠ POLIMORFISMO: CalculadoraDeTempo aceita diferentes tipos de Titulo
 * - ü§ù INTERFACES: FiltroRecomendacao trabalha com objetos Classificavel
 */ 

public class Principal {
    public static void main(String[] args) {
        
        // ========================================
        // üé¨ TRABALHANDO COM FILMES
        // ========================================
        
        // üèóÔ∏è INSTANCIA√á√ÉO: Criando um objeto da classe Filme
        Filme meuFilme = new Filme();
        
        // üîí ENCAPSULAMENTO: Usando setters para definir valores
        // (Os atributos s√£o privados, s√≥ acess√≠veis via m√©todos p√∫blicos)
        meuFilme.setNome("O poderoso chef√£o");
        meuFilme.setAnoDeLancamento(1970);
        meuFilme.setDuracaoEmMinutos(180);
        
        // üîí ENCAPSULAMENTO: Usando getter para acessar valor privado
        System.out.println("Dura√ß√£o do filme: " + meuFilme.getDuracaoEmMinutos());

        // üß¨ HERAN√áA: exibeFichaTecnica() √© m√©todo herdado da classe Titulo
        meuFilme.exibeFichaTecnica();
        
        // üîí ENCAPSULAMENTO: M√©todo p√∫blico que manipula atributos privados
        // O m√©todo avalia() controla como as notas s√£o armazenadas
        meuFilme.avalia(8);
        meuFilme.avalia(5);
        meuFilme.avalia(10);
        
        // üîí ENCAPSULAMENTO: Getters protegem o acesso aos dados calculados
        System.out.printf("""
            Total de Avalia√ß√µes: %d
            M√©dia das Avalia√ß√µes: %.2f
            """, meuFilme.getTotalDeAvaliacoes(), meuFilme.pegaMedia());

        // ========================================
        // üì∫ TRABALHANDO COM S√âRIES  
        // ========================================
        
        // üèóÔ∏è INSTANCIA√á√ÉO: Criando um objeto da classe Serie
        // üß¨ HERAN√áA: Serie herda todos os m√©todos e atributos de Titulo
        Serie lost = new Serie();
        lost.setNome("Lost");
        lost.setAnoDeLancamento(2000);
        lost.exibeFichaTecnica();  // üß¨ M√©todo herdado de Titulo
        
        // üé≠ COMPORTAMENTO ESPEC√çFICO: M√©todos exclusivos da classe Serie
        lost.setTemporadas(10);
        lost.setEpisodiosPorTemporada(10);
        lost.setMinutosPorEpisodio(50);
        
        // üé≠ POLIMORFISMO: getDuracaoEmMinutos() tem comportamento diferente em Serie
        // Serie SOBRESCREVE (override) este m√©todo para calcular: temporadas * epis√≥dios * minutos
        System.out.println("Dura√ß√£o para maratonar Lost: " + lost.getDuracaoEmMinutos());

        // üèóÔ∏è INSTANCIA√á√ÉO: Criando outro filme para demonstrar polimorfismo
        Filme outroFilme = new Filme();
        outroFilme.setNome("Avatar");
        outroFilme.setAnoDeLancamento(2023);
        outroFilme.setDuracaoEmMinutos(200);

        // ========================================
        // üé≠ DEMONSTRANDO POLIMORFISMO
        // ========================================
        
        // üèóÔ∏è INSTANCIA√á√ÉO: Criando calculadora de tempo
        CalculadoraDeTempo calculadora = new CalculadoraDeTempo();
        
        // üé≠ POLIMORFISMO: O m√©todo inclui() aceita qualquer objeto do tipo Titulo
        // Tanto Filme quanto Serie s√£o subclasses de Titulo, ent√£o funcionam!
        calculadora.inclui(meuFilme);    // ‚úÖ Filme √© um Titulo
        calculadora.inclui(outroFilme);  // ‚úÖ Filme √© um Titulo  
        calculadora.inclui(lost);        // ‚úÖ Serie √© um Titulo
        
        // üîí ENCAPSULAMENTO: Acessando o resultado via getter
        System.out.println("Tempo total para assistir tudo: " + calculadora.getTempoTotal() + " minutos");

        // ========================================
        // ü§ù DEMONSTRANDO INTERFACES
        // ========================================
        
        // üèóÔ∏è INSTANCIA√á√ÉO: Criando filtro de recomenda√ß√£o
        FiltroRecomendacao filtro = new FiltroRecomendacao();
        
        // ü§ù INTERFACE: filtra() aceita qualquer objeto que implemente Classificavel
        // Filme implementa a interface Classificavel
        filtro.filtra(meuFilme);

        // üèóÔ∏è INSTANCIA√á√ÉO: Criando um epis√≥dio
        Episodio episodio = new Episodio();
        episodio.setNumero(1);
        episodio.setSerie(lost);           // üîó ASSOCIA√á√ÉO: Epis√≥dio pertence a uma Serie
        episodio.setTotalVisualizacoes(300);

        Filme filmeEdgard = new Filme();
        filmeEdgard.setNome("Bring Her Back");
        filmeEdgard.setAnoDeLancamento(2025);
        filmeEdgard.setDiretor(" Michael Philippou, Danny Philippou");
        filmeEdgard.setDuracaoEmMinutos(99);
        filmeEdgard.avalia(8);

        ArrayList<Filme> listaDeFilmes = new ArrayList<>();
        listaDeFilmes.add(meuFilme);     // Adicionando primeiro filme
        listaDeFilmes.add(outroFilme);   // Adicionando segundo filme  
        listaDeFilmes.add(filmeEdgard);  // Adicionando terceiro filme
        
        // ========================================
        // üìã EXIBINDO LISTA DE FILMES DE FORMA ORGANIZADA
        // ========================================
        
        System.out.println("================================");
        System.out.println("LISTA COMPLETA DE FILMES");
        System.out.println("================================");
        for (int i = 0; i < listaDeFilmes.size(); i++) {
            Filme filme = listaDeFilmes.get(i);
            System.out.printf("""
                FILME %d:
                Nome: %s
                Ano: %d
                Diretor: %s
                Dura√ß√£o: %d minutos
                Avalia√ß√µes: %d
                M√©dia: %.1f
            --------------------------------
            """, 
                (i + 1),
                filme.getNome(),
                filme.getAnoDeLancamento(), 
                filme.getDiretor() != null ? filme.getDiretor() : "N√£o informado",
                filme.getDuracaoEmMinutos(),
                filme.getTotalDeAvaliacoes(),
                filme.getTotalDeAvaliacoes() > 0 ? filme.pegaMedia() : 0.0
            );
        }
    
        
        // ü§ù INTERFACE: Episodio tamb√©m implementa Classificavel
        // Mesmo m√©todo filtra(), mas comportamento diferente baseado na implementa√ß√£o
        filtro.filtra(episodio);
    }
}